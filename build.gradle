plugins {
	id 'org.springframework.boot'
	id 'io.spring.dependency-management'
//	id 'org.springframework.boot' version '2.2.6.RELEASE'
//	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
	id 'war'
	id 'idea'
	id 'io.github.divinespear.jpa-schema-generate'
//	id 'org.hidetake.ssh' apply false
	id 'org.hidetake.ssh'
}

apply plugin: 'project-report'
apply from: './gradle/ssh.gradle'

group = 'com.lt'
version = '0.0.1'
// use java 8 to compile since wildfly 14 only support it
sourceCompatibility = JavaVersion.VERSION_1_8
//sourceCompatibility = 11


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	compile.exclude module: "spring-boot-starter-tomcat"

}

repositories {
//	mavenCentral()
	mavenLocal()
	maven {
		url "https://repo.maven.apache.org/maven2"
//		url "http://localhost:18081/repository/maven-proxy/"
	}
}

ext {
	set('springBootAdminVersion', "2.2.1")
}

// Include bouncycastle examples 
sourceSets {
	main {
		java {
			srcDirs = ['src/main/java',]
//					   'example/beg-crypto-examples/src']
		}
	}
}

processResources {
	// processResources configuration
	println 'processResources config start'
	for (gradleTaskName in gradle.startParameter.taskNames) {
		if (gradleTaskName.contains("deployApp")) {
			def activeProfile = project.getTasksByName(gradleTaskName, false)[0].activeProfile
			println activeProfile
			project.activeProfile = activeProfile
			break
		}
	}
	from ('/src/main/resources') {
		include 'application.properties'
		filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
				activeProfile: project.activeProfile])
	}
	exclude 'jboss-deployment-structure.xml'
 	println 'processResources config end'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-integration'
	implementation 'org.springframework.boot:spring-boot-starter-mail'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
//	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-quartz'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'de.codecentric:spring-boot-admin-starter-client'
	implementation 'de.codecentric:spring-boot-admin-starter-server'
	implementation 'org.springframework.data:spring-data-rest-hal-browser'
	implementation 'org.springframework.session:spring-session-core'

	implementation 'io.hawt:hawtio-springboot:2.6.0'
	if (project.getProperty('activeProfile').contains('dev')) {
		// need runtime Servlet classes for bootrun
		implementation 'org.springframework.boot:spring-boot-starter-undertow'
		implementation 'org.springframework.boot:spring-boot-starter-jta-atomikos'
		implementation 'org.springframework.boot:spring-boot-starter-activemq'
//		implementation 'org.apache.activemq:activemq-pool'
	}
	if (project.getProperty('activeProfile').contains('uat')) {
		// no need runtime for war
		compileOnly 'org.springframework.boot:spring-boot-starter-undertow'
		compile 'org.springframework.boot:spring-boot-starter-jta-atomikos'
		compile 'org.springframework.boot:spring-boot-starter-activemq'
	}
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'com.unboundid:unboundid-ldapsdk'
	testImplementation 'org.springframework.integration:spring-integration-test'
	testImplementation 'org.springframework.security:spring-security-test'

	compile 'org.bouncycastle:bcprov-jdk15on:1.68'
	compile 'org.bouncycastle:bcpkix-jdk15on:1.68'
	compile 'org.bouncycastle:bcprov-ext-jdk15on:1.68'
	compile 'org.bouncycastle:bcmail-jdk15on:1.68'
	compile 'org.bouncycastle:bcpg-jdk15on:1.68'
	compile 'org.bouncycastle:bctls-jdk15on:1.68'

}

dependencyManagement {
	imports {
		mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
	}
}

test {
	useJUnitPlatform()
}

war {
	from './pg-app/build'
 	enabled=true
	archiveFileName = 'pg.war'
	metaInf {
		from 'src/main/resources/jboss-deployment-structure.xml'
	}
	webInf {
		from 'src/main/resources/web.xml', 'src/main/resources/jboss-web.xml'
	}
}

task npmBuild(type: Exec) {
	workingDir = './pg-app'
	commandLine 'cmd', '/c', 'npm run build'
}

bootRun {
}

generateSchema {
	// default options
	// see SchemaGenerationConfig to all options
	vendor = 'hibernate+spring'
	scriptAction = "drop-and-create"
	format = true
	properties = [
		'hibernate.dialect': 'org.hibernate.dialect.MySQL5InnoDBDialect',
		"hibernate.implicit_naming_strategy": "org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy",
		"hibernate.physical_naming_strategy": "org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy",
		'hibernate.id.new_generator_mappings': 'false',
	]
	databaseProductName = 'MySQL'
	databaseMajorVersion = 5
	databaseMinorVersion = 7
	packageToScan = ['com.lt.pg.model',]
}